import { useState, useEffect } from 'react'\nimport { Card } from '../ui/Card'\nimport { Button } from '../ui/Button'\nimport { Badge } from '../ui/Badge'\nimport { Modal } from '../ui/Modal'\nimport { \n  Bell, \n  X, \n  CheckCircle, \n  Trophy, \n  Gift, \n  Star, \n  Zap,\n  Settings,\n  MoreHorizontal,\n  BellOff,\n  Volume2,\n  VolumeX\n} from 'lucide-react'\nimport { clsx } from 'clsx'\n\ninterface Notification {\n  id: string\n  type: 'achievement' | 'points' | 'reward' | 'streak' | 'system' | 'social'\n  title: string\n  message: string\n  timestamp: Date\n  read: boolean\n  actionUrl?: string\n  metadata?: {\n    points?: number\n    achievement?: string\n    reward?: string\n    icon?: string\n  }\n}\n\ninterface NotificationCenterProps {\n  notifications: Notification[]\n  onMarkAsRead: (id: string) => void\n  onMarkAllAsRead: () => void\n  onDeleteNotification: (id: string) => void\n  onToggleSound: () => void\n  soundEnabled: boolean\n  className?: string\n}\n\nconst NOTIFICATION_CONFIG = {\n  achievement: {\n    icon: Trophy,\n    color: 'text-yellow-600',\n    bgColor: 'bg-yellow-100',\n    borderColor: 'border-yellow-200',\n    label: 'Achievement'\n  },\n  points: {\n    icon: Star,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-100',\n    borderColor: 'border-blue-200',\n    label: 'Points'\n  },\n  reward: {\n    icon: Gift,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-100',\n    borderColor: 'border-purple-200',\n    label: 'Reward'\n  },\n  streak: {\n    icon: Zap,\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-100',\n    borderColor: 'border-orange-200',\n    label: 'Streak'\n  },\n  system: {\n    icon: Settings,\n    color: 'text-gray-600',\n    bgColor: 'bg-gray-100',\n    borderColor: 'border-gray-200',\n    label: 'System'\n  },\n  social: {\n    icon: CheckCircle,\n    color: 'text-green-600',\n    bgColor: 'bg-green-100',\n    borderColor: 'border-green-200',\n    label: 'Social'\n  }\n}\n\nexport function NotificationCenter({\n  notifications,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onDeleteNotification,\n  onToggleSound,\n  soundEnabled,\n  className\n}: NotificationCenterProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [filter, setFilter] = useState<string>('all')\n  const [showSettings, setShowSettings] = useState(false)\n  \n  const unreadCount = notifications.filter(n => !n.read).length\n  \n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'all') return true\n    if (filter === 'unread') return !notification.read\n    return notification.type === filter\n  })\n  \n  const groupedNotifications = filteredNotifications.reduce((groups, notification) => {\n    const today = new Date().toDateString()\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString()\n    const notificationDate = notification.timestamp.toDateString()\n    \n    let group = 'Older'\n    if (notificationDate === today) group = 'Today'\n    else if (notificationDate === yesterday) group = 'Yesterday'\n    \n    if (!groups[group]) groups[group] = []\n    groups[group].push(notification)\n    return groups\n  }, {} as Record<string, Notification[]>)\n  \n  const formatTimeAgo = (date: Date) => {\n    const now = new Date()\n    const diff = now.getTime() - date.getTime()\n    const minutes = Math.floor(diff / 60000)\n    const hours = Math.floor(diff / 3600000)\n    const days = Math.floor(diff / 86400000)\n    \n    if (minutes < 60) return `${minutes}m ago`\n    if (hours < 24) return `${hours}h ago`\n    return `${days}d ago`\n  }\n  \n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.read) {\n      onMarkAsRead(notification.id)\n    }\n    \n    if (notification.actionUrl) {\n      window.location.href = notification.actionUrl\n    }\n  }\n  \n  const filterOptions = [\n    { key: 'all', label: 'All', count: notifications.length },\n    { key: 'unread', label: 'Unread', count: unreadCount },\n    { key: 'achievement', label: 'Achievements', count: notifications.filter(n => n.type === 'achievement').length },\n    { key: 'points', label: 'Points', count: notifications.filter(n => n.type === 'points').length },\n    { key: 'reward', label: 'Rewards', count: notifications.filter(n => n.type === 'reward').length }\n  ]\n\n  return (\n    <>\n      {/* Notification Bell */}\n      <div className={clsx('relative', className)}>\n        <button\n          onClick={() => setIsOpen(true)}\n          className={clsx(\n            'relative p-2 rounded-lg transition-colors',\n            'hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500',\n            unreadCount > 0 && 'text-primary-600'\n          )}\n        >\n          <Bell className=\"w-5 h-5\" />\n          \n          {/* Unread Count Badge */}\n          {unreadCount > 0 && (\n            <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-xs font-bold text-white\">\n                {unreadCount > 9 ? '9+' : unreadCount}\n              </span>\n            </div>\n          )}\n          \n          {/* Sound Indicator */}\n          {!soundEnabled && (\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-gray-400 rounded-full flex items-center justify-center\">\n              <VolumeX className=\"w-2 h-2 text-white\" />\n            </div>\n          )}\n        </button>\n      </div>\n      \n      {/* Notification Panel Modal */}\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Notifications\"\n        size=\"lg\"\n      >\n        <div className=\"space-y-4\">\n          {/* Header Actions */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-gray-600\">\n                {unreadCount} unread\n              </span>\n              {unreadCount > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"small\"\n                  onClick={onMarkAllAsRead}\n                  className=\"text-xs\"\n                >\n                  Mark all read\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"small\"\n                onClick={onToggleSound}\n                className=\"p-2\"\n              >\n                {soundEnabled ? (\n                  <Volume2 className=\"w-4 h-4\" />\n                ) : (\n                  <VolumeX className=\"w-4 h-4\" />\n                )}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"small\"\n                onClick={() => setShowSettings(true)}\n                className=\"p-2\"\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            {filterOptions.map(option => (\n              <button\n                key={option.key}\n                onClick={() => setFilter(option.key)}\n                className={clsx(\n                  'px-3 py-1.5 rounded-lg text-sm font-medium transition-all',\n                  filter === option.key\n                    ? 'bg-primary-100 text-primary-700 border border-primary-200'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                )}\n              >\n                {option.label}\n                {option.count > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                    {option.count}\n                  </Badge>\n                )}\n              </button>\n            ))}\n          </div>\n          \n          {/* Notifications List */}\n          <div className=\"max-h-96 overflow-y-auto space-y-4\">\n            {Object.entries(groupedNotifications).map(([group, groupNotifications]) => (\n              <div key={group}>\n                <h4 className=\"text-sm font-medium text-gray-900 mb-2 sticky top-0 bg-white py-1\">\n                  {group}\n                </h4>\n                \n                <div className=\"space-y-2\">\n                  {groupNotifications.map(notification => {\n                    const config = NOTIFICATION_CONFIG[notification.type]\n                    const Icon = config.icon\n                    \n                    return (\n                      <div\n                        key={notification.id}\n                        className={clsx(\n                          'relative p-3 rounded-lg border transition-all cursor-pointer group',\n                          notification.read\n                            ? 'bg-white border-gray-200 hover:bg-gray-50'\n                            : clsx('bg-gradient-to-r from-white to-primary-50', config.borderColor, 'border-l-4')\n                        )}\n                        onClick={() => handleNotificationClick(notification)}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          {/* Icon */}\n                          <div className={clsx(\n                            'flex-shrink-0 w-8 h-8 rounded-lg flex items-center justify-center',\n                            config.bgColor\n                          )}>\n                            <Icon className={clsx('w-4 h-4', config.color)} />\n                          </div>\n                          \n                          {/* Content */}\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <h5 className={clsx(\n                                  'text-sm font-medium truncate',\n                                  notification.read ? 'text-gray-700' : 'text-gray-900'\n                                )}>\n                                  {notification.title}\n                                </h5>\n                                <p className={clsx(\n                                  'text-sm mt-1',\n                                  notification.read ? 'text-gray-500' : 'text-gray-600'\n                                )}>\n                                  {notification.message}\n                                </p>\n                                \n                                {/* Metadata */}\n                                {notification.metadata && (\n                                  <div className=\"flex items-center gap-2 mt-2\">\n                                    {notification.metadata.points && (\n                                      <Badge variant=\"success\" className=\"text-xs\">\n                                        +{notification.metadata.points} pts\n                                      </Badge>\n                                    )}\n                                    {notification.metadata.icon && (\n                                      <span className=\"text-lg\">\n                                        {notification.metadata.icon}\n                                      </span>\n                                    )}\n                                  </div>\n                                )}\n                              </div>\n                              \n                              <div className=\"flex items-center gap-2 ml-2\">\n                                <span className=\"text-xs text-gray-500\">\n                                  {formatTimeAgo(notification.timestamp)}\n                                </span>\n                                \n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"small\"\n                                  onClick={(e) => {\n                                    e.stopPropagation()\n                                    onDeleteNotification(notification.id)\n                                  }}\n                                  className=\"opacity-0 group-hover:opacity-100 p-1 h-auto\"\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Unread Indicator */}\n                          {!notification.read && (\n                            <div className=\"absolute top-2 right-2 w-2 h-2 bg-primary-500 rounded-full\" />\n                          )}\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            ))}\n            \n            {filteredNotifications.length === 0 && (\n              <div className=\"text-center py-8\">\n                <BellOff className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  No notifications\n                </h3>\n                <p className=\"text-gray-600\">\n                  {filter === 'all' \n                    ? 'You\\'re all caught up!' \n                    : `No ${filter} notifications found.`}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Settings Modal */}\n      <Modal\n        isOpen={showSettings}\n        onClose={() => setShowSettings(false)}\n        title=\"Notification Settings\"\n      >\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"font-medium text-gray-900 mb-4\">Notification Preferences</h3>\n            \n            <div className=\"space-y-4\">\n              <label className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Sound notifications</span>\n                  <p className=\"text-xs text-gray-500\">Play sound when new notifications arrive</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={soundEnabled}\n                  onChange={onToggleSound}\n                  className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                />\n              </label>\n              \n              <label className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Achievement notifications</span>\n                  <p className=\"text-xs text-gray-500\">Get notified when you unlock achievements</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={true}\n                  className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                />\n              </label>\n              \n              <label className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Points notifications</span>\n                  <p className=\"text-xs text-gray-500\">Get notified when you earn points</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={true}\n                  className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                />\n              </label>\n              \n              <label className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-700\">Streak reminders</span>\n                  <p className=\"text-xs text-gray-500\">Remind me to maintain my check-in streak</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={true}\n                  className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </>\n  )\n}