import { useState, useEffect } from 'react'\nimport { Card } from '../ui/Card'\nimport { Badge } from '../ui/Badge'\nimport { Avatar } from '../ui/Avatar'\nimport { \n  Activity, \n  TrendingUp, \n  Users, \n  Zap, \n  Star,\n  Trophy,\n  CheckCircle,\n  Clock\n} from 'lucide-react'\nimport { clsx } from 'clsx'\n\ninterface LiveUpdate {\n  id: string\n  type: 'check_in' | 'achievement' | 'points' | 'level_up' | 'streak'\n  user: {\n    id: string\n    name: string\n    avatar?: string\n    department?: string\n  }\n  action: string\n  details?: string\n  points?: number\n  timestamp: Date\n  isNew?: boolean\n}\n\ninterface LiveUpdatesProps {\n  updates: LiveUpdate[]\n  currentUserId?: string\n  maxItems?: number\n  showUserActivity?: boolean\n  className?: string\n}\n\nconst UPDATE_CONFIG = {\n  check_in: {\n    icon: CheckCircle,\n    color: 'text-green-600',\n    bgColor: 'bg-green-100',\n    label: 'checked in'\n  },\n  achievement: {\n    icon: Trophy,\n    color: 'text-yellow-600',\n    bgColor: 'bg-yellow-100',\n    label: 'unlocked achievement'\n  },\n  points: {\n    icon: Star,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-100',\n    label: 'earned points'\n  },\n  level_up: {\n    icon: TrendingUp,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-100',\n    label: 'leveled up'\n  },\n  streak: {\n    icon: Zap,\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-100',\n    label: 'streak milestone'\n  }\n}\n\nexport function LiveUpdates({\n  updates,\n  currentUserId,\n  maxItems = 10,\n  showUserActivity = true,\n  className\n}: LiveUpdatesProps) {\n  const [recentUpdates, setRecentUpdates] = useState<LiveUpdate[]>([])\n  const [animatingItems, setAnimatingItems] = useState<Set<string>>(new Set())\n  \n  // Filter and sort updates\n  const filteredUpdates = updates\n    .filter(update => showUserActivity || update.user.id !== currentUserId)\n    .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n    .slice(0, maxItems)\n  \n  // Handle new updates with animation\n  useEffect(() => {\n    const newUpdates = filteredUpdates.filter(update => \n      !recentUpdates.find(existing => existing.id === update.id)\n    )\n    \n    if (newUpdates.length > 0) {\n      // Add animation class to new items\n      const newIds = new Set(newUpdates.map(u => u.id))\n      setAnimatingItems(newIds)\n      \n      // Remove animation after delay\n      setTimeout(() => {\n        setAnimatingItems(new Set())\n      }, 1000)\n    }\n    \n    setRecentUpdates(filteredUpdates)\n  }, [filteredUpdates, recentUpdates])\n  \n  const formatTimeAgo = (date: Date) => {\n    const now = new Date()\n    const diff = now.getTime() - date.getTime()\n    const minutes = Math.floor(diff / 60000)\n    const hours = Math.floor(diff / 3600000)\n    \n    if (minutes < 1) return 'Just now'\n    if (minutes < 60) return `${minutes}m ago`\n    if (hours < 24) return `${hours}h ago`\n    return date.toLocaleDateString()\n  }\n  \n  const getUpdateText = (update: LiveUpdate) => {\n    const config = UPDATE_CONFIG[update.type]\n    const isCurrentUser = update.user.id === currentUserId\n    const userName = isCurrentUser ? 'You' : update.user.name\n    \n    switch (update.type) {\n      case 'check_in':\n        return `${userName} ${config.label}${update.details ? ` ${update.details}` : ''}`\n      case 'achievement':\n        return `${userName} ${config.label}${update.details ? `: \"${update.details}\"` : ''}`\n      case 'points':\n        return `${userName} ${config.label}${update.points ? ` (${update.points} pts)` : ''}`\n      case 'level_up':\n        return `${userName} ${config.label}${update.details ? ` to ${update.details}` : ''}`\n      case 'streak':\n        return `${userName} reached ${update.details || 'streak milestone'}`\n      default:\n        return `${userName} ${update.action}`\n    }\n  }\n  \n  const getOnlineUsers = () => {\n    const uniqueUsers = new Map()\n    const recentThreshold = Date.now() - 5 * 60 * 1000 // 5 minutes\n    \n    recentUpdates.forEach(update => {\n      if (update.timestamp.getTime() > recentThreshold) {\n        uniqueUsers.set(update.user.id, update.user)\n      }\n    })\n    \n    return Array.from(uniqueUsers.values())\n  }\n  \n  const onlineUsers = getOnlineUsers()\n\n  return (\n    <Card className={className}>\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"w-5 h-5 text-primary-600\" />\n            <h3 className=\"font-medium text-gray-900\">Live Activity</h3>\n            {recentUpdates.length > 0 && (\n              <Badge variant=\"success\" className=\"text-xs\">\n                {recentUpdates.length} recent\n              </Badge>\n            )}\n          </div>\n          \n          {/* Online Users Count */}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n              <Users className=\"w-4 h-4\" />\n              <span>{onlineUsers.length} active</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Online Users Avatars */}\n        {onlineUsers.length > 0 && (\n          <div className=\"flex items-center gap-2 mb-4 pb-4 border-b border-gray-100\">\n            <span className=\"text-sm text-gray-600\">Recently active:</span>\n            <div className=\"flex items-center -space-x-2\">\n              {onlineUsers.slice(0, 5).map(user => (\n                <Avatar\n                  key={user.id}\n                  src={user.avatar}\n                  alt={user.name}\n                  size=\"sm\"\n                  className=\"ring-2 ring-white\"\n                />\n              ))}\n              {onlineUsers.length > 5 && (\n                <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 ring-2 ring-white\">\n                  +{onlineUsers.length - 5}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Activity Feed */}\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n          {recentUpdates.length > 0 ? (\n            recentUpdates.map(update => {\n              const config = UPDATE_CONFIG[update.type]\n              const Icon = config.icon\n              const isAnimating = animatingItems.has(update.id)\n              const isCurrentUser = update.user.id === currentUserId\n              \n              return (\n                <div\n                  key={update.id}\n                  className={clsx(\n                    'flex items-start gap-3 p-2 rounded-lg transition-all duration-500',\n                    isAnimating && 'animate-pulse bg-primary-50 border border-primary-200',\n                    isCurrentUser && 'bg-blue-50 border border-blue-200',\n                    !isAnimating && !isCurrentUser && 'hover:bg-gray-50'\n                  )}\n                >\n                  {/* User Avatar */}\n                  <Avatar\n                    src={update.user.avatar}\n                    alt={update.user.name}\n                    size=\"sm\"\n                    className=\"flex-shrink-0\"\n                  />\n                  \n                  {/* Activity Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900\">\n                          {getUpdateText(update)}\n                        </p>\n                        \n                        {update.user.department && (\n                          <p className=\"text-xs text-gray-500\">\n                            {update.user.department}\n                          </p>\n                        )}\n                      </div>\n                      \n                      {/* Activity Icon */}\n                      <div className={clsx(\n                        'flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center ml-2',\n                        config.bgColor\n                      )}>\n                        <Icon className={clsx('w-3 h-3', config.color)} />\n                      </div>\n                    </div>\n                    \n                    {/* Timestamp and Points */}\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <span className=\"text-xs text-gray-500\">\n                        {formatTimeAgo(update.timestamp)}\n                      </span>\n                      \n                      {update.points && (\n                        <Badge variant=\"success\" className=\"text-xs\">\n                          +{update.points} pts\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )\n            })\n          ) : (\n            <div className=\"text-center py-6\">\n              <Clock className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600\">\n                No recent activity\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Activity will appear here as it happens\n              </p>\n            </div>\n          )}\n        </div>\n        \n        {/* Real-time Indicator */}\n        <div className=\"mt-4 pt-3 border-t border-gray-100\">\n          <div className=\"flex items-center justify-center gap-2 text-xs text-gray-500\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            <span>Updates in real-time</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  )\n}