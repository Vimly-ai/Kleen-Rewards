name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  
jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run type checking
      run: |
        cd frontend
        npm run typecheck
        
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:run
        
    - name: Run test coverage
      run: |
        cd frontend
        npm run test:coverage
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/coverage-final.json
        flags: frontend
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Run bundle analysis
      run: |
        cd frontend
        npm run analyze
        
    - name: Check bundle size
      run: |
        cd frontend
        npm run bundle-size-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'frontend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run accessibility tests
      run: |
        cd frontend
        npm run test:a11y
        
    - name: Build for accessibility testing
      run: |
        cd frontend
        npm run build
        
    - name: Start server for Pa11y
      run: |
        cd frontend
        npm run preview &
        sleep 10
        
    - name: Run Pa11y accessibility tests
      run: |
        cd frontend
        npx pa11y http://localhost:4173 \
          --standard WCAG2AA \
          --reporter cli \
          --threshold 0

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Start server for Lighthouse
      run: |
        cd frontend
        npm run preview &
        sleep 10
        
    - name: Run Lighthouse CI
      run: |
        cd frontend
        npx @lhci/cli@0.12.x autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, security, accessibility]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build for production
      run: |
        cd frontend
        npm run build
      env:
        VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Generate build report
      run: |
        cd frontend
        npm run build-report
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: frontend/dist/
        retention-days: 30
        
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploy to staging environment"
        # Add staging deployment commands here
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploy to production environment"
        # Add production deployment commands here

  notification:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add success notification (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.build.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification